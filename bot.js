const venom = require("venom-bot");
const fs = require("fs");
const path = require("path");

// Estados globais
const estadoUsuario = {};
const timeoutsUsuarios = {};
const TEMPO_INATIVIDADE = 5 * 60 * 1000; // 5 minutos
const PASTA_ATENDIMENTOS = path.join(__dirname, "atendimentos");

if (!fs.existsSync(PASTA_ATENDIMENTOS)) {
  fs.mkdirSync(PASTA_ATENDIMENTOS);
}

// Cria sess√£o do bot
venom
  .create({ session: "rbf-motos-bot" })
  .then((client) => start(client))
  .catch((err) => console.error("Erro ao iniciar o bot:", err));

// Fun√ß√£o principal
function start(client) {
  client.onMessage(async (message) => {
    if (message.isGroupMsg) return;

    const msg = message.body.trim();
    const sender = message.from;
    const dataAtual = new Date().toISOString();

    iniciarTimeoutInatividade(client, sender);

    // AGENDAMENTO
    if (estadoUsuario[sender] === "aguardando_agendamento") {
      const agendamento = {
        mensagem: msg,
        telefone: sender,
        criadoEm: dataAtual,
        tipo: "agendamento",
      };

      salvarArquivo(agendamento, sender);
      delete estadoUsuario[sender];

      await client.sendText(
        "557192724383@c.us",
        `üìÖ *Novo agendamento recebido:*\n\n${msg}\n\nüì≤ Cliente: ${sender}`
      );

      return client.sendText(
        sender,
        "‚úÖ *Seu agendamento foi registrado!*\nEm breve entraremos em contato para confirmar."
      );
    }

    // OR√áAMENTO
    if (estadoUsuario[sender] === "aguardando_orcamento") {
      const orcamento = {
        mensagem: msg,
        telefone: sender,
        criadoEm: dataAtual,
        tipo: "orcamento",
      };

      salvarArquivo(orcamento, sender);
      delete estadoUsuario[sender];

      return client.sendText(
        sender,
        "‚úÖ *Seu pedido de or√ßamento foi registrado!*\nResponderemos em breve com os detalhes."
      );
    }

    // MENU PRINCIPAL
    switch (msg.toLowerCase()) {
      case "1":
        estadoUsuario[sender] = "aguardando_agendamento";
        return client.sendText(
          sender,
          "üìÖ *Agendamento de Servi√ßo*\n\nPor favor, envie agora as informa√ß√µes do servi√ßo:\nNome, modelo da moto, servi√ßo desejado e data/hora."
        );

      case "2":
        estadoUsuario[sender] = "aguardando_orcamento";
        return client.sendText(
          sender,
          "üí∞ *Solicita√ß√£o de Or√ßamento*\n\nPor favor, envie agora as informa√ß√µes:\nModelo da moto, servi√ßo desejado e descri√ß√£o do problema."
        );

      case "3":
        const latitude = -12.701601974992823;
        const longitude = -38.33495505027141;

        await client.sendLocation(
          sender,
          latitude,
          longitude,
          "üìç RBF Motos",
          "RTv. Segunda da Derba, 34 - Cama√ßari de Dentro, Cama√ßari - BA, 42804-525"
        );

        return client.sendText(
          sender,
          "üïí *Hor√°rio de atendimento:*\nSegunda a Sexta, das 8h √†s 18h\nüìû (71) 99272-4383\nüì∏ Instagram: @rbf.motos"
        );

      case "4":
        return client.sendText(
          sender,
          "üîî Um atendente foi acionado. Por favor, aguarde..."
        );

      default:
        return client.sendText(
          sender,
          "üèçÔ∏è *Bem-vindo √† RBF Motos!*\n\nComo podemos te ajudar?\n\n1Ô∏è‚É£ Agendar um servi√ßo\n2Ô∏è‚É£ Solicitar or√ßamento\n3Ô∏è‚É£ Informa√ß√µes (endere√ßo e hor√°rio)\n4Ô∏è‚É£ Falar com um atendente\n\n*Responda com o n√∫mero da op√ß√£o.*"
        );
    }
  });
}

// ‚è±Ô∏è Fun√ß√£o de timeout por inatividade
function iniciarTimeoutInatividade(client, sender) {
  if (timeoutsUsuarios[sender]) {
    clearTimeout(timeoutsUsuarios[sender]);
  }

  timeoutsUsuarios[sender] = setTimeout(() => {
    client.sendText(
      sender,
      "‚åõ Encerramos esse atendimento por inatividade. Se precisar de mais alguma coisa, estamos √† disposi√ß√£o! üëç"
    );
    delete timeoutsUsuarios[sender];
  }, TEMPO_INATIVIDADE);
}

// üíæ Fun√ß√£o para salvar agendamentos/or√ßamentos em JSON
function salvarArquivo(objeto, sender) {
  const nomeArquivo = `${Date.now()}_${sender.replace(/\D/g, "")}.json`;
  const caminho = path.join(PASTA_ATENDIMENTOS, nomeArquivo);

  fs.writeFileSync(caminho, JSON.stringify(objeto, null, 2));
  console.log(`‚úÖ Salvo: ${nomeArquivo}`);
}
